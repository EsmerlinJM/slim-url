name: Deploy deployment enviroment with Infrastructure
on:
  workflow_dispatch:
  pull_request:
    branches:
    - main
    paths:
    - iac/**/*
    - .github/workflows/development.yaml
    - apps/**/*
    types: [opened, synchronize, reopened, labeled]

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: iac/
    steps:

    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}
        role-to-assume: ${{ secrets.ARN_ROLE_ASUME }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init
      id: init
      run: terraform init -reconfigure -backend-config="bucket=${{ secrets.BUCKET_NAME }}" -backend-config="key=${{ secrets.KEY_STATE_NAME }}"

    - name: Terraform Format
      id: fmt
      run: terraform fmt

    - name: Terraform validate
      id: validate
      run: terraform validate

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -input=false -no-color
      continue-on-error: true

    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>
          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false

    - name: Declare some variables
      shell: bash
      run: |
        echo "sha=$(git rev-parse --short "$GITHUB_SHA")" >> "$GITHUB_ENV"

  deploy_create_short_url_lambda:
    needs: terraform
    uses: ./.github/workflows/deploy-create-short-url-lambda.yaml
    secrets: inherit
    with:
      lambda_name: create-short-url-${{ github.sha }}

  deploy_redirect_lambda:
    needs: terraform
    uses: ./.github/workflows/deploy-redirect-lambda.yaml
    secrets: inherit
    with:
      lambda_name: redirect-${{ github.sha }}


